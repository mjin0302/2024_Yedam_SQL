-- DBMS_OUTPUT.PUT_LINE() 프로시저를 실행하기 위한 설정 변경
SET SERVEROUTPUT ON;

-- PROCEDURE
-- 1) 문법
CREATE PROCEDURE 프로시저명
   (매개변수명 [모드] 데이터타입, ...)
IS
   -- DECLARE절은 숨김 왜냐? 충돌이 생기기 때문이지 ~
   -- 선언부 : 로컬변수, 커서, 예외사항 등을 선언 
   
BEGIN
   -- PROCEDURE가 수행할 코드
   
EXCEPTION
   -- 에러처리
END;
/

-- 2) 적용
DROP PROCEDURE test_pro;
CREATE PROCEDURE test_pro
   -- 매개변수는 VARCHAR2라도 크기를 지정 할 수 없음
   -- 왜냐? 넘어오는 값의 크기를 모르기 때문에
   (p_msg VARCHAR2) -- 암시적으로 IN으로 선언 
IS
   v_msg VARCHAR2(1000) := 'Hello! ';
BEGIN
   DBMS_OUTPUT.PUT_LINE(p_msg || ', ' || v_msg);
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      DBMS_OUTPUT.PUT_LINE('데이터가 존재하지 않습니다.');
END;
/

DECLARE
   v_result VARCHAR2(1000);
-- 오라클이 프로시저와 함수를 구분하는 건 호출하는 형태로 구분가능
-- oracle이 현재 실행하는 객체가 PROCEDURE인지 FUNCTION인지를 구분하는 방법
-- => 호출형태 (왼쪽에 변수가 존재하는가)
-- v_result := test_pro('PL/SQL');
-- 3) 실행
BEGIN
   test_pro('PL/SQL');
END;
/

-- IN 모드 : 호출환경 -> 프로시저로 값을 전달, 프로시저 내부에서 상수 취급
-- 상수로 보고 값을 가지고 올 때 사용
DROP PROCEDURE raise_salary;
CREATE PROCEDURE raise_salary
   (p_eid IN employees.employee_id%TYPE)
IS

BEGIN
   -- ERROR : 프로시저 내부에서 상수 취급이되므로 값을 변경할 수 없음
   --p_eid := 100;
   
   UPDATE employees
   SET    salary = salary * 1.1
   WHERE  employee_id = p_eid;
END;
/

SELECT employee_id, salary
FROM   employees
WHERE  employee_id IN (100, 130, 149);

DECLARE
   v_first NUMBER(3, 0) := 100; -- 초기화된 변수
   v_second CONSTANT NUMBER(3, 0) := 149; -- 상수
BEGIN
   raise_salary(100);
   raise_salary(v_first+30);
   raise_salary(v_first);
   raise_salary(v_second);
END;
/

-- OUT 모드 : 프로시저 => 호출환경으로 값을 반환, 프로시저 내부에서 초기화되지 않는 변수로 인지 
--1) 적용
CREATE PROCEDURE test_p_out
(p_num IN NUMBER,
p_out OUT NUMBER) -- MOD : OUT 지정 
IS 
BEGIN
    DBMS_OUTPUT.PUT_LINE('IN'||p_num);
    DBMS_OUTPUT.PUT_LINE('OUT'||p_out);
    
END; --블록이 종료되는 순간 out모드의 매개변수가 가지고 있는 값이 그대로 반환 [out모드가  null 값이면 null 값 전달]
/

-- 2) 실행 코드 
DECLARE
-- OUT MODE는 반드시 변수가 필요하다 (돌려받을때 공간 필요)
    v_result NUMBER(4,0) := 1234;
BEGIN 
    DBMS_OUTPUT.PUT_LINE('1) result : ' ||v_result); -- v_result : 1234
    test_p_out(1000,v_result); -- 프로시저 내부에서 out값을 null 로 인식 
    DBMS_OUTPUT.PUT_LINE('2) result : ' ||v_result);
END;
/

--더하기 
--1)적용
DROP PROCEDURE pro_plus;
CREATE PROCEDURE pro_plus
--매개변수 설정 
(p_x IN NUMBER,
p_y IN NUMBER,
p_sum OUT NUMBER -- OUT 모드의 최종 값 = RETURN 과 동일한 형태 (함수에서 매개변수 받고 return  값 나오는것과 동일)
)
IS 
BEGIN 
    p_sum := p_x + p_y;
END;
/

--2)실행 
DECLARE 
-- mode : out 의 경우 변수 생성 필요 
    v_total NUMBER(10,0);
BEGIN
    pro_plus(10,25,v_total);
    DBMS_OUTPUT.PUT_LINE(v_total);
END;
/

--IN OUT 모드 : IN 모드와 OUT모드 두가지를 하나의 변수로 처리 
-- 기존의 IN 과 OUT은 따로따로 동작을 하는데 IN OUT의 경우 OUT 모드 기반으로 프로시저를 호출 하면 기존의 값이 IN 값을 덮어 씌여진다

--'0101234123' => '010-1234-1234'
-- 날짜를 지정한 포맷으로 변경  : 오라클의 경우 '24/11/27' 인데  => '24년11월27일' 로 변경 하는 경우 

CREATE PROCEDURE format_phone
(p_phone_no IN OUT VARCHAR2) -- 변수 하나 등록
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('before : ' || p_phone_no); -- 변경전 값
    p_phone_no := SUBSTR(p_phone_no,1,3) --  SUBSTR(대상,자르는 처음 위치, 자를 갯수) : 문자열을 자르는 함수 
                || '-' || SUBSTR(p_phone_no,4,4)
                || '-' || SUBSTR(p_phone_no,8); -- 8번째 부터 나머지 다 
    DBMS_OUTPUT.PUT_LINE('after : ' ||  p_phone_no);
END;
/

--실행
DECLARE 
    v_no VARCHAR2(100) := '01012341234';
BEGIN
    format_phone(v_no); -- IN 값 
     DBMS_OUTPUT.PUT_LINE(v_no); -- OUT 값
     -- 프로시저를 거치면서 원래 데이터('01012341234') 가 사라지고 변경 값이 덮어 씌여 졌다. 
     --'0101234123' 전 => '010-1234-1234'후 둘다 같이 나타낼수 없다. 
END;
rollback;